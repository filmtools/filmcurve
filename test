#!/usr/bin/env python

# This file should go into a new tests/ directory.

import subprocess
import sys

from FilmTools.FilmCurve import FilmCurve


# ----------------------------
# Prerequisites
# ----------------------------

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


# ----------------------------
# Test routines
# ----------------------------

def testFindOffset( zones, densities, density, target, expected_offset, max_deviation = 0.01  ):
	print
	print bcolors.HEADER + "****** Test: FilmCurve.getOffset ******" + bcolors.ENDC
	print "Zoness:" , zones
	print "Densities:", densities
	print "Max. allowed deviation:", max_deviation
	print "Find zone offset for density:", density

	print "Expected zone:", target
	print "Expected offset:", expected_offset

	calculator = FilmCurve(zones, densities)
	offset = calculator.getOffset( target, density )

	ratio = 1 - (expected_offset / offset )

	if ratio > max_deviation:
		print bcolors.FAIL + "Test failed, retrieved offset instead", str(offset) + bcolors.ENDC
		return False

	print "Found offset:", str(offset) + bcolors.OKGREEN + " OK" + bcolors.ENDC
	return True




def testFindZone( zones, densities, density, expected, max_deviation = 0.01  ):
	print
	print bcolors.HEADER + "****** Test: FilmCurve.findZone ******" + bcolors.ENDC
	print "Zoness:" , zones
	print "Densities:", densities
	print "Max. allowed deviation:", max_deviation
	print "Find zone for density:", density

	print "Expected result:", expected

	calculator = FilmCurve(zones, densities)
	result = calculator.findZone( density )

	ratio = 1 - (result / expected)

	if ratio > max_deviation:
		print bcolors.FAIL + "Test failed, retrieved instead", str(result) + bcolors.ENDC
		return False

	print "Found result:", str(result) + bcolors.OKGREEN + " OK" + bcolors.ENDC
	return True




def testFindDensity( zones, densities, zone, expected, max_deviation = 0.01 ):
	print
	print bcolors.HEADER + "****** Test: FilmCurve.findDensity ******" + bcolors.ENDC
	print "Zoness:" , zones
	print "Densities:", densities
	print "Find density for zone:", zone
	print "Max. allowed deviation:", max_deviation
	print "Expected result:", expected

	calculator = FilmCurve(zones, densities)
	result = calculator.findDensity( zone )

	ratio = 1 - (result / expected)

	if ratio > max_deviation:
		print bcolors.FAIL + "Test failed, retrieved instead", str(result) + bcolors.ENDC
		return False

	print "Found result:", str(result) + bcolors.OKGREEN + " OK" + bcolors.ENDC
	return True



# ----------------------------
# Test Data
# ----------------------------

zones = [ 0.00, 1.00, 2.00, 3.00, 4.00, 5.00, 6.00, 7.00, 8.00, 9.00, 10.00 ]
densities = [ 0.02, 0.08, 0.17, 0.29, 0.44, 0.63, 0.86, 1.03, 1.16, 1.22, 1.34 ]


# ----------------------------
# Test series
# ----------------------------

if  testFindOffset(zones, densities, 1.29, 8.0, -1.62) \
and testFindZone(zones, densities, 1.29, 9.63) \
and testFindDensity(zones, densities, 4.00, 0.44):
	# All went fine
	sys.exit(0)

# One test failed.
sys.exit(1)


