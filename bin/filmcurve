#!/usr/bin/env python

import argparse
import sys
import numpy as np
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt

from FilmTools.FilmCurve import FilmCurve

# ----------------------------------------------------------
# CLI parameters
# ----------------------------------------------------------

#
# 1. Define command line options.
#    This also generates --help and error handling
#

CLI=argparse.ArgumentParser(
	prog='filmcurve',

	description="""Analyses the given zone numbers and film densities, using a quintic polynomial.""",

	epilog="""N.B. This program is intended for photographic/densitometric purposes.
	It surely is not 'state of the art' polynomial analysis."""
)


CLI.add_argument(
  "-z",
  required=True,
  nargs="+",  # 1 or more values expected => creates a list
  type=float,
  default=[],
  help="""Zone numbers as space separated list of float numbers,
  usually from 0.00 to 10.00 in 0.33 steps (1/3 f-stops)."""
)

CLI.add_argument(
  "-d",
  required=True,
  nargs="+",  # 1 or more values expected => creates a list
  type=float,
  default=[],
  help="""Density values as space separated list of float numbers,
  usually as 'density above fog'."""
)


CLI.add_argument(
  "--offset",
  metavar='Zones',
  type=float,
  default=0.0,
  help="""Offset zone numbers before calculation. Option 'test' ignores this."""
)


CLI.add_argument(
  "--plot",
  metavar='file',
  help="Plot to file"
)

CLI.add_argument(
  "--verbose", '-v',
  action='count',
  default=0,
  help="Output verbosity: Try 'v', 'vv', and 'vvv'."
)

CLI.add_argument(
  "--math",
  action='store_true',
  default=False,
  help="Display polynomial coefficients and other maths."
)


CLI.add_argument(
  "-p", "--precision",
  metavar='Precision',
  type=int,
  default=12,
  help="""Goal seek precision, e.g. 3=fast/unexact, 16=slow/overdone.
  Default: 12 (quite fast/appropriate)"""
)

find_arguments = CLI.add_mutually_exclusive_group()

find_arguments.add_argument(
  "--density",
  metavar="logD",
  type=float,
  help="Print zone number where this density value occurs."
)

find_arguments.add_argument(
  "--zone",
  metavar='Zone',
  type=float,
  help="Print density value for this zone number."
)

find_arguments.add_argument(
  "--test",
  action='store_true',
  default=False,
  help="Perform film test."
)




# ----------------------------------------------------------
# Parse CLI parameters
# or show help text
# ----------------------------------------------------------


if len(sys.argv)==1:
    CLI.print_help()
    sys.exit(1)

args = CLI.parse_args()




# ----------------------------------------------------------
# Calculation parameters
# ----------------------------------------------------------

densities    = args.d;
zones        = args.z;
find_zone    = args.density;
find_density = args.zone;
plotfile     = args.plot;
x_precision  = args.precision;
zone_offset  = args.offset;
perform_test = args.test
verbosity    = args.verbose
show_math    = args.math

# ----------------------------------------------------------
# The Business
# ----------------------------------------------------------

calculator = FilmCurve(zones, densities, x_precision)

if find_density:
	calculator.setOffset( zone_offset )
	print (calculator.findDensity( find_density ))

elif find_zone:
	calculator.setOffset( zone_offset )
	print (calculator.findZone( find_zone ))


elif perform_test:
	# Prerequisites
	speed_zone = 1
	speedpoint_density = 0.1
	midtone_zone = 5
	target_zone = 8
	target_density = 1.29
	log2 = np.log10(2);


	# Speed things
	# Once we have the speedpoint offset, apply it to the calculator
	speed_offset = calculator.getOffset( speed_zone, speedpoint_density)
	calculator.setOffset(speed_offset)
	if verbosity > 1:
		print ("Speed offset: {0:0.9f} f-stops".format( speed_offset ))
	elif verbosity > 0:
		print ("Speed offset: {0:0.2f} f-stops".format( speed_offset ))


	# Get some data
	zone1_density = calculator.findDensity( speed_zone )
	zone5_density = calculator.findDensity( midtone_zone )
	zone8_density = calculator.findDensity( target_zone )

	# Gamma
	gamma = (zone8_density - zone1_density) / ((target_zone - speed_zone) * log2)

	if verbosity > 1:
		print ("Gamma: {0:0.9f}".format( gamma ))
	elif verbosity > 0:
		print ("Gamma: {0:0.2f}".format( gamma ))

	# Beta
	beta = (zone5_density - zone1_density) / ((midtone_zone - speed_zone) * log2)
	if verbosity > 1:
		print ("Beta: {0:0.9f}".format( beta ))
	elif verbosity > 0:
		print ("Beta: {0:0.2f}".format( beta ))

	# N Developing - Zone system
	N = ( (target_zone-speed_zone) * log2 - ((target_density - speedpoint_density) / gamma)) / log2
	if verbosity > 1:
		print ("Zone system: N{0:+0.9f}".format( N ))
	elif verbosity > 0:
		print ("Zone system: N{0:+0.2f}".format( N ))

	if verbosity < 1:
		print ("{0:0.2f} {1:0.2f} {2:0.2f} {3:+0.2f}".format( speed_offset,gamma,beta,N ))


# ----------------------------------------------------------
# Optional things
# ----------------------------------------------------------
if show_math:
	# Neither-nor, so print statistics.
	np.set_printoptions(precision=14,suppress=True)

	print ("\nCoefficients:")
	print (calculator.coefficients)

	print ("\nResiduals:")
	print (calculator.residuals)

if plotfile:

	# Suppress scientific number formatting
	np.set_printoptions(precision=9,suppress=True)

	curvefit = np.polyval( calculator.interpolator, calculator.zones )

	plt.yscale('linear')

	plt.yticks(np.arange(min(calculator.densities,0), max(calculator.densities)+0.1, 0.1))
	plt.xticks(np.arange(min(calculator.zones,0), max(calculator.zones)+1, 1.0))

	plt.plot( zones, calculator.densities,
		label='Zone/density pairs',
		zorder=10)

	# plt.plot( calculator.zones, calculator.densities,
	#	 label='Zone/density pairs, speed offset applied',
	#	zorder=8)

	plt.plot( calculator.zones, curvefit,
		label='Polynomial model',
		linestyle=':',
		zorder=1)

	plt.plot( calculator.zones, curvefit - calculator.densities,
		label='Model deviation')

	plt.xlabel('Zones')
	plt.ylabel( "logD")

	plt.grid()
	plt.legend()

	if matplotlib.__version__ >= "1.4.0":
		plt.style.use('ggplot')

	plt.savefig( plotfile )

