#!/usr/bin/env python

import argparse
import sys
import numpy as np
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt

from FilmTools.FilmCurve import FilmCurve

# ----------------------------------------------------------
# CLI parameters
# ----------------------------------------------------------

#
# 1. Define command line options.
#    This also generates --help and error handling
#

CLI=argparse.ArgumentParser(
	prog='filmcurve',

	description="""Finds zone (or density) for a given density (or zone, resp.)
    by polynomial interpolation. Prints the polynomial coefficients
    if no zone or density value to seek for are passed.""",

	epilog="""N.B. This program is intended for photographic/densitometric purposes.
	It surely is not 'state of the art' polynomial analysis."""
)


CLI.add_argument(
  "-z",
  required=True,
  nargs="+",  # 1 or more values expected => creates a list
  type=float,
  default=[],
  help="""Zone numbers as space separated list of float numbers,
  usually from 0.00 to 10.00 in 0.33 steps (1/3 f-stops)."""
)

CLI.add_argument(
  "-d",
  required=True,
  nargs="+",  # 1 or more values expected => creates a list
  type=float,
  default=[],
  help="""Density values as space separated list of float numbers,
  usually as 'density above fog'."""
)


CLI.add_argument(
  "-p", "--precision",
  metavar='P',
  type=int,
  default=12,
  help="""Goal seek precision, e.g. 3=fast/unexact, 16=slow/overdone.
  Default: 12 (quite fast/appropriate)"""
)


CLI.add_argument(
  "--plot",
  metavar='file',
  help="Plot to file"
)


find_arguments = CLI.add_mutually_exclusive_group()

find_arguments.add_argument(
  "--density",
  metavar="logD",
  type=float,
  help="Print zone number where this density value occurs."
)

find_arguments.add_argument(
  "--zone",
  metavar='Zone',
  type=float,
  help="Print density value for this zone number."
)




# ----------------------------------------------------------
# Parse CLI parameters
# or show help text
# ----------------------------------------------------------


if len(sys.argv)==1:
    CLI.print_help()
    sys.exit(1)

args = CLI.parse_args()




# ----------------------------------------------------------
# Calculation parameters
# ----------------------------------------------------------

densities    = args.d;
zones        = args.z;
find_zone    = args.density;
find_density = args.zone;
plotfile     = args.plot;
x_precision  = args.precision;




# ----------------------------------------------------------
# The Business
# ----------------------------------------------------------

calculator = FilmCurve(zones, densities, x_precision)

if find_density:
	print calculator.findDensity( find_density )
elif find_zone:
	print calculator.findZone( find_zone )
else:
	# Neither-nor, so print statistics.
	np.set_printoptions(precision=14,suppress=True)

	print ""
	print "Coefficients:"
	print calculator.coefficients

	print "Residuals:"
	print calculator.residuals
	print ""



# ----------------------------------------------------------
# Optional things
# ----------------------------------------------------------

if plotfile:

	# Suppress scientific number formatting
	np.set_printoptions(precision=9,suppress=True)

	curvefit = np.polyval( calculator.interpolator, calculator.zones )

	plt.yscale('linear')

	plt.plot( calculator.zones, calculator.densities,
		label='Zone/density pairs',
		zorder=10)

	plt.plot( calculator.zones, curvefit,
		label='Polynomial model',
		linestyle=':',
		zorder=1)

	plt.plot( calculator.zones, curvefit - calculator.densities,
		label='Model deviation')

	plt.xlabel('zones')
	plt.ylabel('densities')

	plt.grid()
	plt.legend()

	if matplotlib.__version__ >= "1.4.0":
		plt.style.use('ggplot')

	plt.savefig( plotfile )

